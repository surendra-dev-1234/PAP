package com.Service.Goals.Users.Repository;

import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import org.springframework.stereotype.Repository;
import com.Service.Goals.DB.Config.DBConnection;
import com.Service.Goals.Users.Entity.Quarter;
import com.Service.Goals.Users.Entity.UserScore;
import com.Service.Goals.Users.Entity.Users;


@Repository
public class JdbcUserRepository {


	/*public static Map<String,String> readPropertyFile(){
        InputStream input = null;
        try 
        {
            input = new FileInputStream("../icalconfig/Config.properties");

            // load a properties file
            Properties prop = new Properties();
            prop.load(input);



            Enumeration<?> e = prop.propertyNames();
            while (e.hasMoreElements())
            {
                String key = (String) e.nextElement();
                String value = prop.getProperty(key);
                ConfigUtil.propertiesMap.put(key, value);
                System.out.println("Key : " + key + ", Value : " + value);
            }//
            if(ConfigUtil.propertiesMap.get("APP_TYPE").trim().equals("I"))
                input = new FileInputStream("../icalconfig/ICalConfig.properties");
            else if(ConfigUtil.propertiesMap.get("APP_TYPE").trim().equals("N"))
                input = new FileInputStream("../icalconfig/ICalNConfig.properties");



            // load a properties file
            Properties prop1 = new Properties();
            prop1.load(input);



            Enumeration<?> e1 = prop1.propertyNames();
            while (e1.hasMoreElements())
            {
                String key = (String) e1.nextElement();
                String value = prop1.getProperty(key);
                ConfigUtil.propertiesMap.put(key, value);
                System.out.println("Key : " + key + ", Value : " + value);
            }

            System.out.println(prop1.getProperty("databaseUrl"));
            System.out.println(prop1.getProperty("dbuser"));
            System.out.println(prop1.getProperty("dbpassword"));
            System.out.println(prop1.getProperty("dbName"));


        } catch (IOException e) {
            e.printStackTrace();
        }
        Map<String,String> map = ConfigUtil.propertiesMap;
        return map;
    }*/


	public Users getuserpermission(String emailid, String username) {
		Users userPermission=new Users();
		try {
			DBConnection obj=new DBConnection();
			Connection conn=obj.getConnection();
			CallableStatement statement = conn.prepareCall("{call usp_userinsert(?,?)}");

			statement.setString(1, emailid);
			statement.setString(2, username);

			ResultSet rs=statement.executeQuery();
			String roleName="";
			System.out.println(rs);
			while(rs.next()) {
				String user_id=rs.getString("user_id");
				String email_id=rs.getString("email_id");
				String Username=rs.getString("username");
				String rolename=rs.getString("rolename");
				String domain_name=rs.getString("domain_name");
				String domain_id=rs.getString("domain_id");
				
				Users userde= new Users();
				userde.setUser_id(Long.parseLong(user_id));
				userde.setEmail_id(email_id);
				userde.setUsername(Username);
				userde.setRole_name(rolename);
				userde.setDomain_name(domain_name);
				userde.setDomain_id(domain_id);
				
				
				
				
					userPermission.setUser_id(userde.getUser_id());
					userPermission.setEmail_id(userde.getEmail_id());
					userPermission.setUsername(userde.getUsername());
					roleName+=userde.getRole_name()+",";
					userPermission.setRole_name(roleName);
					userPermission.setDomain_name(userde.getDomain_name() );
					userPermission.setDomain_id(userde.getDomain_id());
					userPermission.setLogo(userde.getLogo());
					
					if(userde.getRole_name().equals("LEVEL3_USER")) {
						userPermission.setLevel3_user(true);
					}

					if(userde.getRole_name().equals("LEVEL2_USER")) {
						userPermission.setLevel2_user(true);
					}

					if(userde.getRole_name().equals("LEVEL1_USER")) {
						userPermission.setLevel1_user(true);
					}

					if(userde.getRole_name().equals("HR")) {
						userPermission.setHr(true);
					}
					if(userde.getRole_name().equals("MIS_USER")) {
					userPermission.setMis_user(true);
					}
					if(userde.getRole_name().equals("PED_USER")) {
						userPermission.setPed_user(true);
					}
					if(userde.getRole_name().equals("UNFREEZE_USER")) {
						userPermission.setUnfreeze(true);
					}
				}
			}catch (Exception e) {
				// TODO: handle exception
				System.out.println(e.getMessage());
			}
		return userPermission;
	}

	public List<UserScore> getuserscore(String email, String year, String quarter, String flag) {
		System.out.println(email);
		System.out.println(year);
		System.out.println(quarter);
		System.out.println(flag);
		List<UserScore> ulist=new ArrayList<UserScore>();
		try {
			DBConnection obj=new DBConnection();
			Connection conn=obj.getConnection();
			CallableStatement statement = conn.prepareCall("{call usp_userscoreinsert(?,?,?,?)}");
			System.out.println("1");
			statement.setString(1, email);
			statement.setString(2, year);
			statement.setString(3, quarter);
			statement.setString(4, flag);

			ResultSet rs=statement.executeQuery();
			System.out.println(rs);
			while(rs.next()) {
				
				System.out.println("2");
				String user_id=rs.getString("user_id");
				String email_id=rs.getString("email_id");
				String Username=rs.getString("username");
				String goal_id=rs.getString("goal_id");
				String goal_name=rs.getString("goal_name");
				String goal_description=rs.getString("description");
				Double weights=rs.getDouble("weights");
				String Year=rs.getString("year");
				String quarter_name=rs.getString("quarter_name");
				String quarter_id=rs.getString("q_id");
				
				UserScore useree= new UserScore();
				if(flag.equals("1")||flag.equals("3")) {
					Double self_score=rs.getDouble("self_score");
					String self_comment=rs.getString("self_comment");
					String self_score_update_by=rs.getString("self_score_update_by");
					String self_score_update_date=rs.getString("self_score_update_date");
					useree.setSelf_score(self_score);
					useree.setSelf_comment(self_comment);
					useree.setSelf_score_update_by(self_score_update_by);
					useree.setSelf_score_update_date(self_score_update_date);
				}
				if(flag.equals("2")||flag.equals("3")) {
					Double rm_score=rs.getDouble("rm_score");
					String rm_comment=rs.getString("rm_comment");
					String rm_score_update_by=rs.getString("rm_score_update_by");
					String rm_score_update_date=rs.getString("rm_score_update_date");
					useree.setRm_score(rm_score);
					useree.setRm_comment(rm_comment);
					useree.setRm_score_update_by(rm_score_update_by);
					useree.setRm_score_update_date(rm_score_update_date);
				}
				if(flag.equals("3")) {
					Double ped_score=rs.getDouble("ped_score");
					String ped_comment=rs.getString("ped_comment");
					String ped_score_update_by=rs.getString("ped_score_update_by");
					String ped_score_update_date=rs.getString("ped_score_update_date");
					useree.setPed_score(ped_score);
					useree.setPed_comment(ped_comment);
					useree.setPed_score_update_by(ped_score_update_by);
					useree.setPed_score_update_date(ped_score_update_date);
				}
				useree.setUser_id(user_id);
				useree.setEmail_id(email_id);
				useree.setUsername(Username);
				useree.setGoal_id(goal_id);
				useree.setGoal_name(goal_name);
				useree.setGoal_description(goal_description);
				useree.setWeights(weights);
				useree.setYear(Year);
				useree.setQuarter_name(quarter_name);
				useree.setQuarter_id(quarter_id);
				ulist.add(useree);
				System.out.println("5667587568");
			}}catch (Exception e) {
				System.out.println(e.getMessage());
			}
		System.out.println("333333");
		return ulist;
	}

	public Quarter getquarterdate(String year, String quarter_name, String domain_id) {
		System.out.println(domain_id);
		Quarter quarterDate=new Quarter();	

		try {
			DBConnection obj=new DBConnection();
			Connection conn=obj.getConnection();
			CallableStatement statement = conn.prepareCall("{call usp_quarter_date(?,?,?)}");

			statement.setString(1, year);
			statement.setString(2, quarter_name);
			statement.setString(3, domain_id);

			ResultSet rs=statement.executeQuery();
			//System.out.println(rs);
			while(rs.next()) {
				String Quarter_name=rs.getString("quarter_name");
				String start_date=rs.getString("start_date");
				String end_date=rs.getString("end_date");
				String weight_freeze_date=rs.getString("weight_freeze_date");
				String score_freeze_date=rs.getString("score_freeze_date");
				String weight_flag=rs.getString("weight_flag");
				String score_flag=rs.getString("score_flag");
	

				System.out.println(Quarter_name+"is name");
				quarterDate.setQuarter_name(Quarter_name);
				quarterDate.setStart_date(start_date);
				quarterDate.setEnd_date(end_date);
				quarterDate.setWeight_freeze_date(weight_freeze_date);
				quarterDate.setScore_freeze_date(score_freeze_date);
				quarterDate.setWeight_flag(weight_flag);
				quarterDate.setScore_flag(score_flag);
			}
		}catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
		return quarterDate;
	}

}

