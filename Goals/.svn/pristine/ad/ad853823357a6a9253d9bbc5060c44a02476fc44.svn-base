package com.Service.Goals.Users.Controller;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.StoredProcedureQuery;
import javax.websocket.server.PathParam;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.Service.Goals.Users.Entity.JdbcUserRepository;
import com.Service.Goals.Users.Entity.Quarter;
import com.Service.Goals.Users.Entity.User;
import com.Service.Goals.Users.Entity.UserDetails;
import com.Service.Goals.Users.Repository.QuartarRepository;
import com.Service.Goals.Users.Repository.UserRepository;

@RestController
@CrossOrigin(origins="http://localhost:3000") 
public class SampleController {

	//private static Object JdbcUserRepository;

	@PersistenceContext
	EntityManager em;
	
	@Autowired
	UserRepository repo;
	
	@Autowired
    QuartarRepository repo2;
	
	@Autowired
	JdbcUserRepository repo3;
	
	@GetMapping(value = "/getWithMultipleParameters")
	public User getWithMultipleParameters(User userDTO, @RequestParam(value = "year") String year, @RequestParam(value = "quatar") String quatar) {
		userDTO.setYear(year);
		userDTO.getYear();
		userDTO.setQuaTAR(quatar);
		userDTO.getQuaTAR();
		return userDTO;
	}

	@GetMapping("/user")
	public User getuserdetails(@RequestParam("email") String email) {

		User user= null;

		/*String query="SELECT u.email_id,u.username,r.rolename FROM [PerformanceAppraisal].[dbo].[users] u "
					+" JOIN [PerformanceAppraisal].[dbo].[user_role_mapping] g" + 
						"         ON u.user_id =g.user_id" + 
				"         JOIN [PerformanceAppraisal].[dbo].[role] r" + 
				"         ON g.role_id =r.role_id" + 
				"         WHERE u.email_id = '"+email+"'";
		System.out.println(query);
		try {
				ResultSet rs = ExecuteQuery(query);
				System.out.println(rs);
				while(rs.next())
				{
					String s=rs.getString(1);
					System.out.println(s);
				}
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}*/

		String Email=email;
		if(Email.equals("surendra@Quantira.com")) {
			user= new User();
			user.setHr("false");
			String Hr=user.getHr();
			user.setEmail(email);
			user.setMis_user("false");
			user.setPed_user("false");
			user.setLevel1_user("false");
			user.setLevel2_user("false");
			user.setLevel3_user("true");
		}
		else if(Email.equals("monika@Quantira.com")) {
			user= new User();
			user.setHr("false");
			user.setEmail(email);
			user.setMis_user("false");
			user.setPed_user("false");
			user.setLevel1_user("false");
			user.setLevel2_user("true");
			user.setLevel3_user("false");
		}
		else if(Email.equals("vivek@Quantira.com")) {
			user= new User();
			user.setHr("false");
			user.setEmail(email);
			user.setMis_user("false");
			user.setPed_user("true");
			user.setLevel1_user("false");
			user.setLevel2_user("false");
			user.setLevel3_user("true");	
		}
		else{
			user= new User();
		}
		return user;
	}

	@GetMapping("/all_users")
	public List<User> getuserslist() {
		User user1=new User(1,"sreddy@Quantira.com", "false", "false", "false", "false","false","true");
		User user2=new User(2,"MonikaJ@quantira.com", "false", "false", "false", "false","true","false");
		User user3=new User(3,"vivek@Quantira.com", "false", "false", "true", "false","false", "true");
		List<User> userlist=new ArrayList<User>();
		userlist.add(user1);
		userlist.add(user2);
		userlist.add(user3);
		System.out.println(userlist);
		return userlist;	
	}
	@GetMapping("/all/{email_id}")
	public UserDetails getfindbyemail(@PathVariable("email_id") String email) {
		return repo.findbyemailsingle(email);
	}
  
	@GetMapping("/getallquatars/{domain_id}")
	public List<Quarter> getallquatars(@PathVariable("domain_id") String domain_id) {
		return repo2.getallquatars(domain_id);
	}
	
	@GetMapping("allemployees/{domain_id}/{rm_id}")
	public List<UserDetails> getallemployeesbyRMid(@PathVariable("domain_id") String domain_id,@PathVariable("rm_id") String rm_id) {
		return repo.getallemployeesbyRMid(domain_id,rm_id);
	}
	
	@GetMapping("employee/{email_id}")
	public UserD getemployeebyEmailid(@PathVariable("email_id") String email_id) {
		UserD user=new UserD();
		System.out.println(email_id);
		List elist=repo3.getemployeebyEmailid((email_id));
		String email=(String) elist.get(0);
		String username=(String) elist.get(1);
		System.out.println("5555"+email);
		System.out.println(username);
		user.setEmail_id(email);
		user.setUsername(username);
		return user;
	}
	
	
	/*@GetMapping("/all/domain/t/{email_id}")
	public List getfindbyprocedureT(@PathVariable("email_id") String email_id) {
		SessionFactory factory = HibernateUtil.getSessionFactory();
		Session session = factory.openSession();
		Query query = session.createSQLQuery(
			    "CALL GetStocks(:stockCode)")
			    .addEntity(UserD.class)
			    .setParameter("stockCode", "7277");
			            
			List result = query.list();
			for(int i=0; i<result.size(); i++){
			    UserD stock = (Stock)result.get(i);
			    System.out.println(stock.getStockCode());
			}
	}*/
	
}
